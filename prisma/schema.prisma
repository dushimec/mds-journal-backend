
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String    @id @default(cuid())
  email                    String    @unique
  firstName                String
  lastName                 String
  password                 String?
  role                     UserRole  @default(AUTHOR)
  affiliation              String?
  bio                      String?
  profileImage             String?

  isActive                 Boolean   @default(true)
  emailVerified            Boolean   @default(false)
  emailVerificationCode    String?
  emailVerificationExpires DateTime?

  twoFactorSecret          String?
  twoFactorCodeExpires     DateTime?

  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  authoredSubmissions      Submission[] @relation("UserSubmissions")
  authorRecords            Author[]     @relation("UserAuthors")
  contactMessages          ContactMessage[]
  activityLogs             ActivityLog[]
}

enum UserRole {
  AUTHOR
  REVIEWER
  EDITOR
  ADMIN
}

model Submission {
  id              String   @id @default(cuid())
  status          SubmissionStatus @default(DRAFT)
  manuscriptTitle String?
  abstract        String?
  keywords        String?
  manuscriptType  SubmissionManuscriptType?
  submittedAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  authors         Author[]     @relation("SubmissionAuthors")
  files           FileUpload[]
  declarations    Declaration[]

  userId          String?
  user            User? @relation("UserSubmissions", fields: [userId], references: [id])

  topicId         String?
  topic           Topic?    @relation(fields: [topicId], references: [id])

  journalIssueId  String?
  journalIssue    JournalIssue? @relation(fields: [journalIssueId], references: [id])
}

enum SubmissionStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  REVISION_REQUESTED
  ACCEPTED
  REJECTED
  PUBLISHED
}

enum SubmissionManuscriptType {
  ORIGINAL_RESEARCH
  POLICY_BRIEF
  FIELD_CASE_REPORT
  BOOK_REVIEW
}

model Author {
  id                String   @id @default(cuid())
  fullName          String
  email             String
  affiliation       String
  isCorresponding   Boolean  @default(false)
  order             Int      @default(0)

  submissionId      String
  submission        Submission @relation("SubmissionAuthors", fields: [submissionId], references: [id], onDelete: Cascade)

  userId            String?
  user              User? @relation("UserAuthors", fields: [userId], references: [id])

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model FileUpload {
  id            String   @id @default(cuid())
  fileName      String
  fileType      FileType
  fileUrl       String
  mimeType      String
  fileSize      Int
  uploadDate    DateTime @default(now())
  downloadCount Int      @default(0)

  submissionId  String
  submission    Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
}

enum FileType {
  MANUSCRIPT
  COVER_LETTER
  ETHICS_DOCUMENTATION
}

model Declaration {
  id            String           @id @default(cuid())
  type          DeclarationType
  isChecked     Boolean          @default(false)
  text          String

  submissionId  String
  submission    Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
}

enum DeclarationType {
  ETHICAL_CONDUCT
  CONFLICT_OF_INTEREST
  COPYRIGHT_TRANSFER
}

model HomePage {
  id      String @id @default("homepage")
  title   String
  tagline String
  updatedAt DateTime @updatedAt
}

model AboutPageSection {
  id        String         @id @default(cuid())
  section   AboutSection   @unique
  title     String?
  content   String
  order     Int            @default(0)
  updatedAt DateTime       @updatedAt
  createdAt DateTime       @default(now())
}

enum AboutSection {
  HEADER
  WHAT_IS_MDS_JAED
  WHY_PUBLISH_WITH_US
  HOW_TO_CONTRIBUTE
  AIMS_AND_SCOPE
  PUBLICATION_FREQUENCY
  INDEXING_AND_ACCESSIBILITY
  RESEARCH_EXCELLENCE
  POLICY_IMPACT
  ENGAGEMENT_WITH_PRACTITIONERS
  JOIN_OUR_COMMUNITY
}

model JournalIssue {
  id            String   @id @default(cuid())
  issueNumber   Int
  year          Int
  month         Int?
  title         String
  description   String?
  isSpecial     Boolean  @default(false)
  specialTitle  String?
  guestEditors  String?
  articleCount  Int      @default(0)
  downloads     Int      @default(0)
  publishedAt   DateTime @default(now())
  createdAt     DateTime @default(now())
  submissions   Submission[]
}

model EditorialBoardMember {
  id           String   @id @default(cuid())
  fullName     String
  role         String
  qualifications String?
  affiliation  String?
  bio          String
  email        String?
  profileImage String?
  order        Int      @default(0)
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
}

model SubmissionType {
  id          String   @id @default(cuid())
  name        String
  wordCount   String
  description String
  order       Int      @default(0)
}

model ContactInfo {
  id            String @id @default("contact")
  intro         String
  editorEmail   String
  submissionsEmail String
  email         String?
  phone         String?
  mailingAddress String
  officeHours   String
  locationDescription String
  social        Json?
  updatedAt     DateTime @updatedAt
}

model FAQ {
  id        String   @id @default(cuid())
  question  String
  answer    String
  order     Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
}

model ContactMessage {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  email       String
  institution String?
  inquiryType String
  subject     String
  message     String
  submittedAt DateTime @default(now())
  isRead      Boolean  @default(false)

  userId      String?
  user        User? @relation(fields: [userId], references: [id])
}

model NewsletterSubscriber {
  id                  String       @id @default(cuid())
  email               String       @unique
  subscribedAt        DateTime     @default(now())
  receivedNewsletters Newsletter[] @relation("NewsletterToSubscriber")
}

model Newsletter {
  id           String                 @id @default(cuid())
  title        String
  content      String                 @db.Text
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt
  recipients   NewsletterSubscriber[] @relation("NewsletterToSubscriber")
}

model JournalSettings {
  id        String @id @default("settings")
  name      String
  publisher String
  issn      String?
  logoUrl   String?
  updatedAt DateTime @updatedAt
}

model Topic {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  submissions Submission[]
}

model ActivityLog {
  id        String   @id @default(cuid())
  action    String
  details   Json?
  timestamp DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model AuthorPage {
  id      String @id @default("author-page")
  title   String
  tagline String
  updatedAt DateTime @updatedAt
}

model AuthorGuideline {
  id      String                  @id @default(cuid())
  type    AuthorGuidelineType
  content String
  order   Int                     @default(0)
}

enum AuthorGuidelineType {
  PLAGIARISM_POLICY
  AUTHOR_FEES
  SUBMISSION_TYPES
  PUBLICATION_SCHEDULE
  ACCEPTABLE_TOPICS
  FORMATTING_GUIDELINES
  MANUSCRIPT_FORMAT
  REQUIREMENTS
  ETHICAL_STANDARDS
}
